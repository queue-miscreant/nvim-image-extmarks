*nvim_sixel_extmarks.txt*                                 Image extmarks

================================================================================
INTRODUCTION                                            *nvim-sixel-extmarks-introduction*

        An extension to nvim's extmarks which supports sixel image content.

        [Sixels](https://en.wikipedia.org/wiki/Sixel) are a blob of binary
        data which, when written to a supported terminal, display an image.
        To see if your terminal is supoorted, a good resource to check is
        [Are We Sixel Yet?](https://www.arewesixelyet.com/).

        This plugin relies on ImageMagick for converting images into the
        equivalent sixels. Run:

        `magick -list format | grep -i sixel`

        to see if your intsallation supports sixels.


CACHE                                                   *nvim-sixel-extmarks-cache*

        All generated sixels are cached locally (in Lua state) to improve
        performance. If the file changes in the filesystem, it will be
        necessary to clear this cache by calling |sixel_extmarks.clear_cache|.

        Images are cached by their height in rows, as well as how many rows
        are excluded from the top and bottom of the image.


TMUX                                                    *nvim-sixel-extmarks-tmux*

        As of writing this documentation, tmux, the terminal multiplexer,
        newly supports sixel content. However, if you experiment with this
        feature on your own, you may find that sixels are "sticky" between
        panes and windows.

        To get around this, when clearing the screen, the plugin will attempt
        to "refresh" the content in the session by quickly detaching and
        attaching. With enough delay, this produces visible artifacts,
        including:

            - boxes of "+" characters where the images would be displayed
            - sixel binary content, which appears as random ASCII characters


--------------------------------------------------------------------------------
COMMANDS                                                *nvim-sixel-extmarks-command*

:[range]CreateImage {filepath}                          *CreateImage*

        Create an image extmark with the given filename at the range
        specified. This wraps |sixel_extmarks.create| below.


--------------------------------------------------------------------------------
FUNCTIONS                                               *sixel_extmarks-functions*

All functions are accessed through |Lua|.


                                                        *sixel_extmarks.create*
sixel_extmarks.create(
  {start_row}: integer,
  {end_row}: integer,
  {path}: string
) -> integer

        Create a new image extmark which stretches from (0-indexed) row
        {start_row} to row {end_row} of the buffer and has content
        from the file at {path}.


                                                        *sixel_extmarks.get*
sixel_extmarks.get(
  {start_row}: integer,
  {end_row}: integer
) -> image_extmark[]

        Retrieve a list of image extmarks in the current buffer between
        (0-indexed) rows {start_row} and {end_row}.
        To get all extmarks, set {start_row} to 0 and {end_row} to -1.

        The return value is a table with the following the structure:

            id:         An integer, signifying the id of the extmark.
            start_row:  An integer; the row that the extmark starts on.
            end_row:    An integer; the row that the extmark ends on.
            path:       A string, which is a path.


                                                        *sixel_extmarks.get_by_id*
sixel_extmarks.get_by_id({id}: integer)

        Retrieve an extmark in the current buffer with the given id.


                                                        *sixel_extmarks.remove*
sixel_extmarks.remove({id}: integer)

        Delete the extmark in the current buffer identified by {id}.
        This does NOT free from the cache any of the blobs generated from
        the file the extmark points to.


                                                        *sixel_extmarks.remove_all*
sixel_extmarks.remove_all()

        Delete all extmarks in the current buffer. The same caveat about the
        cache applies here as well.


                                                        *sixel_extmarks.move*
sixel_extmarks.move({id}: integer, {start_row}: integer, {end_row}: integer)

        Move the extmark identified by {id} so that the image stretches
        starting at row {start_row} of the buffer and ends at {end_row}.
        Be aware that this can resize the image.


                                                        *sixel_extmarks.change_content*
sixel_extmarks.change_content({id}: integer, {path}: string)

        Change the content of the extmark identified by {id} to the file at
        {path}.


                                                        *sixel_extmarks.clear_cache*
sixel_extmarks.clear_cache()
sixel_extmarks.clear_cache({path}: string)
sixel_extmarks.clear_cache({paths}: string[])

        Clear the sixel blob cache. If no argument is supplied, then the entire
        cache is cleared.

        If {path}, a single string argument is supplied, then only the blobs
        for that file are removed.

        If {paths}, a list of strings are supplied, then all blobs for those
        files in the list are removed.


                                                        *sixel_extmarks.clear_screen*
sixel_extmarks.clear_screen()

        Clear all content drawn to the screen. Unlike |:mode|, this has the
        additional guarantee of working inside a tmux session.
        See also |nvim-sixel-extmarks-tmux|.


                                                        *sixel_extmarks.redraw*
sixel_extmarks.redraw()
sixel_extmarks.redraw({force}: boolean)

        Clear the screen and redraw the currently displayed content.


                                                        *sixel_extmarks.disable_drawing*
sixel_extmarks.disable_drawing()

        Disable drawing blobs.

        Blobs will still be generated in the background, but the contents will not
        be pushed to the screen.


                                                        *sixel_extmarks.enable_drawing*
sixel_extmarks.enable_drawing()
sixel_extmarks.enable_drawing({redraw}: boolean)

        Enable drawing blobs, after having disabled them with
        |sixel_extmarks.disable_drawing|.

        If called with no arguments or {redraw} is true, the screen is
        redrawn, as if with `sixel_extmarks.redraw(true)`.


                                                        *sixel_extmarks.dump_blob_cache*
sixel_extmarks.dump_blob_cache()

        Generate a snapshot of the blob cache.
        Rather than the cache, the first two layers of keys are returned, i.e.,
        a table with filenames as keys and buffer ranges as values.


--------------------------------------------------------------------------------
CONFIGURATION                                           *nvim-sixel-extmarks-configuration*

None currently.

================================================================================
vim:tw=80:nosta:ft=help:fen:
